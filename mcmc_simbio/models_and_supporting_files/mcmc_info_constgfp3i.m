function mcmc_info = mcmc_info_constgfp3i(modelObj)
% mcmc_info_constgfp3i.m 
% This file contains information on how to set up a constitutive GFP
% experiment using the Simbiology model generated by the function 
% model_protein3. The model is 
% 
% % dG + pol <-> dG_pol  (kf, kr) 
% dG_pol -> dG + pol + pG (kc) 
% 
% where dG is the GFP protein DNA, pol is a species signifying the
% transcription and translation machinery, and pG is the GFP protein output
% of the model. 
% 
% In the experiment, the initial dG concentration is set to different
% values, and the corresponding pG trajectories are measured and compared
% to equivalent trajectories obtained from simulating the model. 
% 
% We fix kf to 5, and estimate the rest of the parameters. 
% 
% In general, each estimation problem can have multiple experiment-model
% pairs that inform some common set of parameters. For example, we might
% have an estimtion problem where the tetR transcription factor shows up in
% two different circuits, say, the incoherent feedforward loop and the
% genetic toggle switch. Each circuit will have a different model and data 
% associated with it, but the tetR dimerization rate parameters (for example) 
% will show up in both models. In general, we do not want to estimate two
% separate values (or *distributions* of values in the Bayesian parameter 
% estimation scenario, especially when the parameters are non-identifiable)
% from each model-data pair. Instead, we want to only estimate a single
% value / distribution from both sets of information. We call models that
% differ in the network topology (i.e., the set of chemical reactions
% defining the model




multiple different model
% topologies, and each model topology might have multiple 'variants' of
% that topology associated with it. We call these variants 'geometries', to
% distinguish from the variation in models due to the topology of the
% network itself. Here, there is only one network topology and geometry.
% Type 'help mcmc_info' in the command line to learn more about the general
% use case, and see the files mcmc_info_constgfp3tetR1 for an example of
% the use of two distincti topologies in a single estimation problem. 


Variations can For example, we might have different
% fixed parameters associated with it. We will call these parameters
% geometries associated with that model, since the network topology of the
% model is the same, but the fact that certain parameters can be different
% is analogous to the networks being geometrically different. 



% User readable description of the circuit. Will be used in the log file generated
% from the MCMC inference procedure.
circuitInfo = ...
    [' dG + pol <-> dG_pol  (kf, kr \n'... )
    'dG_pol -> dG + pol + ppG (kc)\n'...
    'single topology, single geometry.'];

rkfdG = 5; % nM-1s-1
rkrdG = 300; % s-1
rkcp = 0.012; %s-1
cpol = 100; % nM

activeNames = ...
    {'kfdG'
    'krdG'
    'kcp'
    'pol'};

estParams = {'krdG'
    'kcp'
    'pol'};

% The master vector is a vector of parameter values that is to be
% distributed to the model-experiment pairs. 
masterVector = log([rkfdG 
                    rkrdG
                    rkcp
                    cpol]);

% The fixedParams vector sets the index of the parameters in the
% masterVector that stay constant withing the MCMC estimation problem. 
fixedParams = [1];

% The estParamsIx array contains the indices of the parameters that are to
% be estimated in the model. 
estParamsIx = setdiff((1:length(masterVector))', fixedParams);

% The paramMap array here is simply a column vector of the same length as
% the masterVector. In general, for each unique model topology, there will
% be one paramMap. Please type help mcmc_info in the command line to learn
% more about specifying the paramMaps array. See, for example, 
% mcmc_info_constgfp3tetR1.m for an example of a multiple topology 
% estimation problem. 
paramMap = (1:length(masterVector))';

% The paramRanges array is an array of size length(masterVector) x 2, and
% contains the upper and lower bounds for each parameter to be estimated.
% We note that the parameters are log transformed, and therefore, the
% bounds are as well, and here we pick a range of parameter values that are
% +- 3 away from the nominal parameter values. 
paramRanges =  [masterVector(estParamsIx)-3 masterVector(estParamsIx)+3];

% The dataIndices array specifies which dataset within the data_info struct
% each 
dataIndices = 1;

%% next we define the dosing strategy.
dosedNames = {dG'};
dosedVals = [10 30 60];

measuredSpecies = {{'pG'}};
msIx = 1; %


%% setup the MCMC simulation parameters
stdev = 1; % i have no idea what a good value is
tightening = 1; % i have no idea what a good value is
nW = 40; % actual: 200 - 600 ish
stepsize = 3; % actual: 1.1 to 4 ish
niter = 40; % actual: 2 - 30 ish,
npoints = 4e2; % actual: 2e4 to 2e5 ish (or even 1e6 of the number of
%                        params is small)
thinning = 10; % actual: 10 to 40 ish

%% pull all this together into an output struct.
% the mcmc info struct now is an array struct, the way struct should be used!

runsim_info = struct('stdev', {stdev}, ...
    'tightening', {tightening}, ...
    'nW', {nW}, ...
    'stepSize', {stepsize}, ...
    'nIter', {niter}, ...
    'nPoints', {npoints}, ...
    'thinning', {thinning}, ...
    'parallel', true);

% for now we simply make the model_info have just one model (topology).
% But the code will be written in a way such that multiple models can be used.

model_info = struct(...
    'circuitInfo',{circuitInfo},...
    'modelObj', {modelObj},... % array of model objects (different topologies)
    'modelName', {modelObj.name},...; % model names.
    'namesUnord', {activeNames}, ... % names of parameters per model, unordered.
    'paramMaps', {paramMap}, ... % paramMap: matrix mapping models to master vector.
    'dosedNames', {dosedNames},... % cell arrays of species. cell array corresponds
    ...                               % to a model.
    'dosedVals', {dosedVals},...  % matrices of dose vals
    'measuredSpecies', {measuredSpecies}, ... % cell array of cell arrays of
    ...                  % species names. the elements of the inner
    ...                  % cell array get summed.
    'measuredSpeciesIndex', {msIx},...
    'dataToMapTo', dataIndices); % each dataToMapTo property within an 
% element of the model_info array is a vector of length # of geometries.


semanticGroups = num2cell((1:length(estParams))'); %arrayfun(@num2str, 1:10, 'UniformOutput', false);


estParamsIx = setdiff((1:length(masterVector))', fixedParams);

%% master parameter vector, param ranges,
master_info = struct(...
    'estNames', {estParams},...
    'masterVector', {masterVector},...
    'paramRanges', {paramRanges},...
    'fixedParams', {fixedParams},...
    'semanticGroups', {semanticGroups});


mcmc_info = struct('runsim_info', runsim_info, ...
    'model_info', model_info,...
    'master_info', master_info);

% Copyright (c) 2018, Vipul Singhal, Caltech
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:

% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.

% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
end