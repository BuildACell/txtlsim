Readme file for mcmc_simbio, an MCMC toolbox for MATLAB Simbiology models. 
Vipul Singhal, 2017

Section 0) INTRODUCTION
This is a toolbox for performing bayesian parameter inference on your experimental data using MATLAB Simbiology models. We use the famous MCMC hammer as our sampler; you can read more about it at https://msp.org/camcos/2010/5-1/camcos-v5-n1-p04-p.pdf or https://arxiv.org/abs/1202.3665. While this code allows the method to be used with arbitrary Simbiology models, we demonstrate and use it mainly for models generated by the TXTL Modeling toolbox. This toolbox is a wrapper around Aslak Grinsted's gwmcmc toolbox (https://github.com/grinsted), with changes to make it work with simbiology and the txtl modeling toolbox.


Section 1) QUICK START 

Step 0: If you are using this toolbox as part of the txtl modeling toolbox, set the working directory to the txtl toolbox trunk (or just add it to the path), and run txtl_init. If you are using this toolbox as a standalone tool for your own custom Simbiology models, set mcmc_simbio to be your working directory, or add it to the path. 
Once this is done, mcmc_init is visible to MATLAB. 

Step 1: run mcmc_init

Step 2: open the file proj_TXTLMT_example.m for an example of how to use this toolbox. Run this file to check that everything is installed properly. You can copy this file to make your own project. If you plan to use github to verion control your work, make sure that new project file names start with 'proj_', otherwise the directories where data is stored will not be ignored by the .gitignore file. 



Section 2) DIRECTORY STRUCTURE AND DESCRIPTIONS

TOP LEVEL (L1): mcmc_Simbiology (dir) <—— make sure this is in the MATLAB path, then run mcmc_init.
L2>projects (dir)
L2>src (dir)
L2>exp_data (dir)
L2>models_and_supporting_files (dir)
L2>mcmc_init.m (file) <—— run this file at the start of every MATLAB session by typing in mcmc_init into the command line
L2>README.txt (this file, read this!)

############### projects ##################
In the projects directory, put a project script (proj_*.m, with * replaced by whatever name you want) file. The name of this file is the project name, and when this project file is run, a directory of the same name as this file gets created within the projects directory. This directory will contain all the simulation data generated by mcmc. Note that the name of this directory can be changed by supplying a directory name to the project_init command at the beginning of the project .m file. More on this in section 3 below. 


############### src ##################
Source code for the toolbox. You probably do not want to touch this. 

This contains a set of functions for setting up data arrays, models, and specifying simulation conditions, and plotting and saving the results of the MCMC samples. 

Furthermore, it contains a version of Aslak Grinsted's MATLAB implementation of the popular EMCEE package for MCMC sampling. This is an implementation the Goodman and Weare affine invariant Metropolis Hastings sampler. More info at https://github.com/grinsted and https://www.glaciology.net/. I have modified it slightly to handle integration tolerance problems that occur when we run Simbiology models using parameters with values differing by orders of magnitude. 

############### exp_data ##################
Store your experimental data files here. Use the example file data_dsg2014.m as a template. Note that this file is fairly complicated because it uses some old code I wrote, and I plan to simplify it. All your data file needs to do is set up a time vector (tv) and a data array (da) with the following properties: 
- tv is a vector containing the values of the time points where the time series data was collected. These time points should be in seconds. For example, in data_dsg2014 we have 8 hours of data, collected every 8 minutes. So the tv vector is a column vector of length 101, and has entries [0; 480; 960; ...]. 
- da is a numerical array of dimensions # time points by # measured species by # doses. For example, in data_dsg2014, da is a 101 by 2 by 4 array, where the measured species are the mg aptamer conc (first column), and the gfp conc (second column) for each of 4 doses: 0.5, 2, 5 and 20 nM of the GFP5 DNA.

############### models_and_supporting_files ##################
There are two main types of files in this directory, both of which you must edit/create using existing ones as templates:

- an mcmc_info file (like mcmc_info_dsg2014 or mcmc_info_example). This file contains the following information:
1) estNames: a cell array of parameter and species names (strings) in the model that are to be estimated via mcmc. 
2) paramranges: the log transformed ranges of parameter values for these parameters and species. These ranges set up the prior for the mcmc, and so parmeters outside these ranges never get sampled. They also define the ranges where the inital distribution of walkers will be spread. 
3) dosedNames: A cell array of strings specifying which species get dosed (i.e., user defined initial conditions). Often, this is the only type of input that is used. 
4) dosedVals: a matrix of values for the dosing. This matrix has dimensions #species that get dosed by #dose combinations. 
5) measuredspecies: this is a cell array of cell arrays that specifies which species get measured and correspond to the columns (dimension 2) of the data array da. How it is set up is best illustrated by an example. If 
	measuredspecies = {{'A', 'B', 'C'}, {'D', 'E'}} then for each dose combination, the sum of the concentrations of species A, B and C gets compared to the first column of the data array, and the sum of the concentrations of species D and E gets compared to the second column of the data array. 
6) Next, a bunch of mcmc simulation parameters are set. The really important ones are: 
	nW: number of MCMC walkers. Try to make this as high as your RAM allows. Usually 200 - 400 work on standard machines. This needs to be at least 2X the number of parameters you are sampling. 
	stepsize: the only value you cannot use is 1. I find that a step size of 2 to 3 is good, but you can play around to see what works for your problem. 
	niter and npoints: I have found that instead of doing one big 1 million point simulation, doing ten 100000 point simulations is much better in terms of the total amout of time needed. Not sure why, probably a RAM issue. niter is the 10 here, and npoints is the 100000. Each of the iterations will generate a separate simulation data file. 
	thinning: how many steps to skip before recording the next data points to decorrelate them. A value of 10 usually works fine for this, see the gwmcmc (https://github.com/grinsted/gwmcmc) or the (extensive) emcee (http://dfm.io/emcee/current/) documentations. 
	parallel: whether to parallelize the mcmc. I would recommend doing an initial test run with this set to false, and seeing if you get a rejection rate that is not 100%. If it is not, then your code could be working fine (it is a necessary but not sufficient condition...), and it is ok to set the parallel flag to true. 


- Simbiology model object creation files: create a model object, either using the txtl_modeling toolbox or Simbioligy, export it. Note that you need to supply the mcmc_info struct to this function, so it knows which parameters and species to make available for the mcmc 

Section 3) DESCRIPTION OF A PROTOTYPICAL PROJECT (.m) FILE

This project file should have a basic structure that follows the structure of the file proj_TXTLMT_example.m already present in the directory. 

	A note on naming this file: This file will create or specify a directory where the simulation results data will be stored. Generally, these simulation data files can get fairly large, and are not something that should be tracked on github. If you precede the name of this directory with the string 'proj_', then it will get ignored by github. The simplest way to do this is to name your .m script file proj_your_project_name.m, and leave the argument to project_init within this file empty. This will cause project_init to use the name of the project script to create the project directory, and so it will also be named proj_your_project_name. 

How to set up proj_your_project_name.m (i.e., a description of proj_TXTLMT_example.m) 


Step 1: 
Run project_init.m to set up a directory where the results of the MCMC (logfile, parameter estimates, possibly figures) will be stored. 

Step 2: 
Import the data using a function like data_dsg2014.m. See above for notes on this function. 

Step 3: Setup an mcmc_info struct by following the instructions above and using the existing file as an example. 

Step 4: Use a function similar to model_dsg2014 to create and import a model. Note that your model creation function needs to accelerate the model, and should append a new field of reordered species and parameters to the mcmc_info struct. 

Step 5: execute mcmc_runsim as in the example file. 
--------------------------------------------------------------

Note that your simulation data and a summary log file will be stored in the project directory proj_your_project_name/simdata_yyyymmdd_hhmmss, which gets created using the time stamp of the simulation. 
##############################################################
California Institute of Technology
Pasadena, CA
2017